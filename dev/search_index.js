var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OtsuThresholding","category":"page"},{"location":"#OtsuThresholding","page":"Home","title":"OtsuThresholding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OtsuThresholding.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OtsuThresholding]","category":"page"},{"location":"#OtsuThresholding._isrgb-Tuple{AbstractArray}","page":"Home","title":"OtsuThresholding._isrgb","text":"_isrgb(A::AbstractArray) -> Bool\n\nInternal helper to check if an array represents an RGB image. Checks for:\n\n3D numeric array (UInt8/UInt16/Float) with 3 channels in 3rd dim.\n2D array of RGB structs (from ColorTypes.jl).\n\nValidates value range [0, 1] for floats.\n\n\n\n\n\n","category":"method"},{"location":"#OtsuThresholding._klt_grayscale-Union{Tuple{AbstractArray{T, D}}, Tuple{D}, Tuple{T}} where {T, D}","page":"Home","title":"OtsuThresholding._klt_grayscale","text":"_klt_grayscale(I_rgb::AbstractArray{<:Real, 3}) -> Matrix{Float32}\n_klt_grayscale(I_rgb::AbstractArray{<:RGB, 2}) -> Matrix{Float32}\n\nInternal helper to convert an RGB image to grayscale using Karhunen-Lo√®ve Transform (PCA), keeping the component with the highest energy (variance). Handles both standard 3D arrays and 2D arrays of RGB structs. Returns a Float32 matrix.\n\n\n\n\n\n","category":"method"},{"location":"#OtsuThresholding.otsu","page":"Home","title":"OtsuThresholding.otsu","text":"otsu(I::AbstractArray{<:Union{Real, Colorant}}, n::Integer=2) -> (Matrix{Int}, Float64)\notsu(I::AbstractArray{<:Union{Real, Colorant}}) -> (Matrix{Int}, Float64)\n\nGlobal image thresholding/segmentation using Otsu's N-level method.\n\nSegments the image I into n classes by maximizing the between-class variance.\n\nArguments\n\nI: Input image. Can be a 2D grayscale array (subtype of Real or Gray),       or a 3D RGB array (e.g., Array{Float64, 3}) or 2D array of RGB types.       Input types like UInt8, UInt16, or AbstractFloat are expected.      RGB images are converted to grayscale using PCA (KLT) first.\nn: The desired number of classes (thresholds + 1). Default is 2.\n\nReturns\n\nIDX::Matrix{Int}: An array of the same size as the input (or the grayscale version),                    containing cluster indices (from 1 to n) for each pixel.                    0 is assigned to non-finite pixels (NaN or Inf) in the input I.\nsep::Float64: The value of the separability criterion (between-class variance / total variance),                 within the range [0, 1]. 0 indicates issues (e.g., fewer unique values than n),                 1 indicates perfect separability (only achieved with exactly n distinct values).\n\nDetails\n\nThe function first handles RGB input by converting it to grayscale using the principal component with the most energy (variance) via KLT/PCA. Grayscale images (Gray type) are converted to standard numeric arrays.\nThe grayscale image intensity values are then normalized and mapped to 0-255 integer levels.\nOtsu's method is applied to the histogram of these levels.\nFor n=2 and n=3, direct formulas are used.\nFor n >= 4, optimization (Optim.optimize with Nelder-Mead) is used to find the n-1 thresholds that maximize the separability criterion.\nIt's noted that thresholds generally become less credible as n increases.\n\nReferences\n\nOtsu N, \"A Threshold Selection Method from Gray-Level Histograms,\" IEEE Trans. Syst. Man Cybern., vol. SMC-9, no. 1, pp. 62-66, 1979. DOI: 10.1109/TSMC.1979.4310076\n\nExample\n\n```julia using Images, TestImages, ImageView # Ensure ImageView is installed img = testimage(\"mandril_gray\") # Example grayscale image\n\n2-level thresholding (default)\n\nIDX2, sep2 = otsu(img) println(\"Separability for n=2: \", sep2) imshow(IDX2, name=\"Otsu n=2\") # Requires ImageView\n\n3-level thresholding\n\nIDX3, sep3 = otsu(img, 3) println(\"Separability for n=3: \", sep3) imshow(IDX3, name=\"Otsu n=3\")\n\n4-level thresholding\n\nIDX4, sep4 = otsu(img, 4) println(\"Separability for n=4: \", sep4) imshow(IDX4, name=\"Otsu n=4\")\n\nExample with RGB image (e.g., from TestImages)\n\nimgrgb = testimage(\"mandrill\") IDXrgb, seprgb = otsu(imgrgb, 3) println(\"Separability for RGB (n=3): \", seprgb) imshow(IDXrgb, name=\"Otsu RGB n=3\")\n\n\n\n\n\n","category":"function"}]
}
